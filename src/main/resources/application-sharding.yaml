spring:
  shardingsphere:
    mode:
      type: Standalone
      repository:
        type: JDBC
    datasource:
      names: dy0,dy1
      dy0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/dynamic0
        username: root
        password: root
      dy1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/dynamic1
        username: root
        password: root
    rules:
      sharding:
        tables:
          t_order:
            actual-data-nodes: dy$->{0..1}.t_order_$->{com.xiaohei.sharding.util.DataNodeUtil.getDataNodes()}
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: uuid-sharding-inline
            table-strategy:
              standard:
                sharding-column: created_time
                sharding-algorithm-name: date-sharding-classbase
        sharding-algorithms:
          uuid-sharding-inline:
            type: INLINE
            props:
              algorithm-expression: dy$->{Long.parseLong(user_id) % 2}
          date-sharding-classbase:
            type: CLASS_BASED
            props:
              algorithmClass‚ÄêName: com.xiaohei.sharding.algorithm.DateSharding
        binding-tables: t_order